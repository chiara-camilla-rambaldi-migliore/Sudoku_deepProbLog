#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "sudoku_net", "module": "Sudoku_Net(\n  (conv1): Conv2d(1, 32, kernel_size=(4, 4), stride=(1, 1))\n  (conv1_bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (dropout1): Dropout(p=0.25, inplace=False)\n  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2))\n  (conv2_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (dropout2): Dropout(p=0.25, inplace=False)\n  (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))\n  (conv3_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (dropout3): Dropout(p=0.25, inplace=False)\n  (conv4): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n  (conv4_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (dropout4): Dropout(p=0.25, inplace=False)\n  (conv5): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n  (conv5_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (dropout5): Dropout(p=0.25, inplace=False)\n  (maxpool): MaxPool2d(kernel_size=6, stride=6, padding=0, dilation=1, ceil_mode=False)\n  (adaptive_avg_pool): AdaptiveAvgPool2d(output_size=(9, 9))\n  (conv1x1_1): Conv2d(512, 4, kernel_size=(1, 1), stride=(1, 1))\n  (conv1x1_2): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))\n  (conv1x1_3): Conv2d(512, 10, kernel_size=(1, 1), stride=(1, 1))\n  (fc1): Linear(in_features=41472, out_features=810, bias=True)\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.001\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": ":- use_module(library(lists)).\n:- use_module(library(apply)).\nnn(sudoku_net,[X, R, C],Y,[0, 1, 2, 3])::digit(X,R,C,Y).\ncreateFake2x3(X,[[D1, D2, D3], [D4, D5, D6]]) :- digit(X,1,1,D1), digit(X,1,2,D2), digit(X,1,3,D3), digit(X,2,1,D4), digit(X,2,2,D5), digit(X,2,3,D6).\ngiveRightNumber(0,_).\ngiveRightNumber(FH,FH).\nrealColumns([],[]).\nrealColumns(FakeCol,Col) :- FakeCol=[FH | FT], Col=[H | T], giveRightNumber(FH,H), realColumns(FT,T).\nrealRows([],[]).\nrealRows(FakeRows,Rows) :- FakeRows=[FH | FT], Rows=[H | T], realColumns(FH,H), realRows(FT,T).\ninList(X,[X | _]).\ninList(X,[_ | Tail]) :- inList(X,Tail).\nlistInList([],_).\nlistInList([H | T],L) :- inList(H,L), listInList(T,L).\nallDiff([]).\nallDiff([X | Tail]) :- \\+inList(X,Tail), allDiff(Tail).\ntranspose([[] | _],[]).\ntranspose(Matrix,[Row | Rows]) :- transpose_1st_col(Matrix,Row,RestMatrix), transpose(RestMatrix,Rows).\ntranspose_1st_col([],[],[]).\ntranspose_1st_col([[H | T] | Rows],[H | Hs],[T | Ts]) :- transpose_1st_col(Rows,Hs,Ts).\nsolve2x3_both(X,Label) :- createFake2x3(X,Fake), realRows(Fake,Rows), maplist(listInList([1, 2, 3]),Rows), maplist(allDiff,Rows), transpose(Rows,Columns), maplist(allDiff,Columns), label_empty(Label,Fake), label_compl(Label,Rows).\nsolve2x3_empty(X,Label) :- createFake2x3(X,Fake), realRows(Fake,Rows), maplist(listInList([1, 2, 3]),Rows), maplist(allDiff,Rows), transpose(Rows,Columns), maplist(allDiff,Columns), label_empty(Label,Fake).\nsolve2x3_compl(X,Label) :- createFake2x3(X,Fake), realRows(Fake,Rows), maplist(listInList([1, 2, 3]),Rows), maplist(allDiff,Rows), transpose(Rows,Columns), maplist(allDiff,Columns), label_compl(Label,Rows).\nlabel_empty(1,L) :- L=[[1, 0, 0], [0, 1, 2]].\nlabel_empty(2,L) :- L=[[1, 0, 0], [0, 3, 1]].\nlabel_empty(3,L) :- L=[[1, 0, 0], [0, 1, 3]].\nlabel_empty(4,L) :- L=[[1, 0, 0], [0, 2, 1]].\nlabel_empty(5,L) :- L=[[2, 0, 0], [0, 3, 2]].\nlabel_empty(6,L) :- L=[[2, 0, 0], [0, 2, 1]].\nlabel_empty(7,L) :- L=[[3, 0, 0], [0, 2, 3]].\nlabel_empty(8,L) :- L=[[3, 0, 0], [0, 3, 1]].\nlabel_empty(9,L) :- L=[[2, 0, 0], [0, 2, 3]].\nlabel_empty(10,L) :- L=[[2, 0, 0], [0, 1, 2]].\nlabel_empty(11,L) :- L=[[3, 0, 0], [0, 3, 2]].\nlabel_empty(12,L) :- L=[[3, 0, 0], [0, 1, 3]].\nlabel_empty(13,L) :- L=[[0, 2, 3], [0, 0, 2]].\nlabel_empty(14,L) :- L=[[0, 2, 3], [0, 0, 1]].\nlabel_empty(15,L) :- L=[[0, 3, 2], [0, 0, 3]].\nlabel_empty(16,L) :- L=[[0, 3, 2], [0, 0, 1]].\nlabel_empty(17,L) :- L=[[0, 1, 3], [0, 0, 2]].\nlabel_empty(18,L) :- L=[[0, 1, 3], [0, 0, 1]].\nlabel_empty(19,L) :- L=[[0, 1, 2], [0, 0, 3]].\nlabel_empty(20,L) :- L=[[0, 1, 2], [0, 0, 1]].\nlabel_empty(21,L) :- L=[[0, 3, 1], [0, 0, 3]].\nlabel_empty(22,L) :- L=[[0, 3, 1], [0, 0, 2]].\nlabel_empty(23,L) :- L=[[0, 2, 1], [0, 0, 2]].\nlabel_empty(24,L) :- L=[[0, 2, 1], [0, 0, 3]].\nlabel_empty(25,L) :- L=[[0, 0, 3], [3, 1, 0]].\nlabel_empty(26,L) :- L=[[0, 0, 3], [2, 3, 0]].\nlabel_empty(27,L) :- L=[[0, 0, 2], [2, 1, 0]].\nlabel_empty(28,L) :- L=[[0, 0, 2], [3, 2, 0]].\nlabel_empty(29,L) :- L=[[0, 0, 3], [1, 3, 0]].\nlabel_empty(30,L) :- L=[[0, 0, 3], [3, 2, 0]].\nlabel_empty(31,L) :- L=[[0, 0, 2], [1, 2, 0]].\nlabel_empty(32,L) :- L=[[0, 0, 2], [2, 3, 0]].\nlabel_empty(33,L) :- L=[[0, 0, 1], [1, 2, 0]].\nlabel_empty(34,L) :- L=[[0, 0, 1], [3, 1, 0]].\nlabel_empty(35,L) :- L=[[0, 0, 1], [1, 3, 0]].\nlabel_empty(36,L) :- L=[[0, 0, 1], [2, 1, 0]].\nlabel_empty(37,L) :- L=[[1, 0, 0], [3, 1, 0]].\nlabel_empty(38,L) :- L=[[1, 0, 0], [2, 3, 0]].\nlabel_empty(39,L) :- L=[[1, 0, 0], [2, 1, 0]].\nlabel_empty(40,L) :- L=[[1, 0, 0], [3, 2, 0]].\nlabel_empty(41,L) :- L=[[2, 0, 0], [1, 3, 0]].\nlabel_empty(42,L) :- L=[[2, 0, 0], [3, 2, 0]].\nlabel_empty(43,L) :- L=[[3, 0, 0], [1, 2, 0]].\nlabel_empty(44,L) :- L=[[3, 0, 0], [2, 3, 0]].\nlabel_empty(45,L) :- L=[[2, 0, 0], [1, 2, 0]].\nlabel_empty(46,L) :- L=[[2, 0, 0], [3, 1, 0]].\nlabel_empty(47,L) :- L=[[3, 0, 0], [1, 3, 0]].\nlabel_empty(48,L) :- L=[[3, 0, 0], [2, 1, 0]].\nlabel_empty(49,L) :- L=[[1, 0, 3], [3, 0, 0]].\nlabel_empty(50,L) :- L=[[1, 0, 3], [2, 0, 0]].\nlabel_empty(51,L) :- L=[[1, 0, 2], [2, 0, 0]].\nlabel_empty(52,L) :- L=[[1, 0, 2], [3, 0, 0]].\nlabel_empty(53,L) :- L=[[2, 0, 3], [1, 0, 0]].\nlabel_empty(54,L) :- L=[[2, 0, 3], [3, 0, 0]].\nlabel_empty(55,L) :- L=[[3, 0, 2], [1, 0, 0]].\nlabel_empty(56,L) :- L=[[3, 0, 2], [2, 0, 0]].\nlabel_empty(57,L) :- L=[[2, 0, 1], [1, 0, 0]].\nlabel_empty(58,L) :- L=[[2, 0, 1], [3, 0, 0]].\nlabel_empty(59,L) :- L=[[3, 0, 1], [1, 0, 0]].\nlabel_empty(60,L) :- L=[[3, 0, 1], [2, 0, 0]].\nlabel_empty(61,L) :- L=[[0, 2, 0], [3, 0, 2]].\nlabel_empty(62,L) :- L=[[0, 2, 0], [2, 0, 1]].\nlabel_empty(63,L) :- L=[[0, 3, 0], [2, 0, 3]].\nlabel_empty(64,L) :- L=[[0, 3, 0], [3, 0, 1]].\nlabel_empty(65,L) :- L=[[0, 1, 0], [1, 0, 2]].\nlabel_empty(66,L) :- L=[[0, 1, 0], [3, 0, 1]].\nlabel_empty(67,L) :- L=[[0, 1, 0], [1, 0, 3]].\nlabel_empty(68,L) :- L=[[0, 1, 0], [2, 0, 1]].\nlabel_empty(69,L) :- L=[[0, 3, 0], [1, 0, 3]].\nlabel_empty(70,L) :- L=[[0, 3, 0], [3, 0, 2]].\nlabel_empty(71,L) :- L=[[0, 2, 0], [1, 0, 2]].\nlabel_empty(72,L) :- L=[[0, 2, 0], [2, 0, 3]].\nlabel_empty(73,L) :- L=[[1, 0, 3], [0, 1, 0]].\nlabel_empty(74,L) :- L=[[1, 0, 3], [0, 3, 0]].\nlabel_empty(75,L) :- L=[[1, 0, 2], [0, 1, 0]].\nlabel_empty(76,L) :- L=[[1, 0, 2], [0, 2, 0]].\nlabel_empty(77,L) :- L=[[2, 0, 3], [0, 3, 0]].\nlabel_empty(78,L) :- L=[[2, 0, 3], [0, 2, 0]].\nlabel_empty(79,L) :- L=[[3, 0, 2], [0, 2, 0]].\nlabel_empty(80,L) :- L=[[3, 0, 2], [0, 3, 0]].\nlabel_empty(81,L) :- L=[[2, 0, 1], [0, 2, 0]].\nlabel_empty(82,L) :- L=[[2, 0, 1], [0, 1, 0]].\nlabel_empty(83,L) :- L=[[3, 0, 1], [0, 3, 0]].\nlabel_empty(84,L) :- L=[[3, 0, 1], [0, 1, 0]].\nlabel_empty(85,L) :- L=[[1, 0, 3], [0, 0, 2]].\nlabel_empty(86,L) :- L=[[1, 0, 3], [0, 0, 1]].\nlabel_empty(87,L) :- L=[[1, 0, 2], [0, 0, 3]].\nlabel_empty(88,L) :- L=[[1, 0, 2], [0, 0, 1]].\nlabel_empty(89,L) :- L=[[2, 0, 3], [0, 0, 2]].\nlabel_empty(90,L) :- L=[[2, 0, 3], [0, 0, 1]].\nlabel_empty(91,L) :- L=[[3, 0, 2], [0, 0, 3]].\nlabel_empty(92,L) :- L=[[3, 0, 2], [0, 0, 1]].\nlabel_empty(93,L) :- L=[[2, 0, 1], [0, 0, 3]].\nlabel_empty(94,L) :- L=[[2, 0, 1], [0, 0, 2]].\nlabel_empty(95,L) :- L=[[3, 0, 1], [0, 0, 2]].\nlabel_empty(96,L) :- L=[[3, 0, 1], [0, 0, 3]].\nlabel_empty(97,L) :- L=[[0, 2, 0], [0, 1, 2]].\nlabel_empty(98,L) :- L=[[0, 2, 0], [0, 3, 1]].\nlabel_empty(99,L) :- L=[[0, 3, 0], [0, 1, 3]].\nlabel_empty(100,L) :- L=[[0, 3, 0], [0, 2, 1]].\nlabel_empty(101,L) :- L=[[0, 1, 0], [0, 3, 2]].\nlabel_empty(102,L) :- L=[[0, 1, 0], [0, 2, 1]].\nlabel_empty(103,L) :- L=[[0, 1, 0], [0, 2, 3]].\nlabel_empty(104,L) :- L=[[0, 1, 0], [0, 3, 1]].\nlabel_empty(105,L) :- L=[[0, 3, 0], [0, 2, 3]].\nlabel_empty(106,L) :- L=[[0, 3, 0], [0, 1, 2]].\nlabel_empty(107,L) :- L=[[0, 2, 0], [0, 3, 2]].\nlabel_empty(108,L) :- L=[[0, 2, 0], [0, 1, 3]].\nlabel_compl(1,L) :- L=[[1, 2, 3], [3, 1, 2]].\nlabel_compl(2,L) :- L=[[1, 2, 3], [2, 3, 1]].\nlabel_compl(3,L) :- L=[[1, 3, 2], [2, 1, 3]].\nlabel_compl(4,L) :- L=[[1, 3, 2], [3, 2, 1]].\nlabel_compl(5,L) :- L=[[2, 1, 3], [1, 3, 2]].\nlabel_compl(6,L) :- L=[[2, 1, 3], [3, 2, 1]].\nlabel_compl(7,L) :- L=[[3, 1, 2], [1, 2, 3]].\nlabel_compl(8,L) :- L=[[3, 1, 2], [2, 3, 1]].\nlabel_compl(9,L) :- L=[[2, 3, 1], [1, 2, 3]].\nlabel_compl(10,L) :- L=[[2, 3, 1], [3, 1, 2]].\nlabel_compl(11,L) :- L=[[3, 2, 1], [1, 3, 2]].\nlabel_compl(12,L) :- L=[[3, 2, 1], [2, 1, 3]].\nlabel_compl(13,L) :- L=[[1, 2, 3], [3, 1, 2]].\nlabel_compl(14,L) :- L=[[1, 2, 3], [2, 3, 1]].\nlabel_compl(15,L) :- L=[[1, 3, 2], [2, 1, 3]].\nlabel_compl(16,L) :- L=[[1, 3, 2], [3, 2, 1]].\nlabel_compl(17,L) :- L=[[2, 1, 3], [1, 3, 2]].\nlabel_compl(18,L) :- L=[[2, 1, 3], [3, 2, 1]].\nlabel_compl(19,L) :- L=[[3, 1, 2], [1, 2, 3]].\nlabel_compl(20,L) :- L=[[3, 1, 2], [2, 3, 1]].\nlabel_compl(21,L) :- L=[[2, 3, 1], [1, 2, 3]].\nlabel_compl(22,L) :- L=[[2, 3, 1], [3, 1, 2]].\nlabel_compl(23,L) :- L=[[3, 2, 1], [1, 3, 2]].\nlabel_compl(24,L) :- L=[[3, 2, 1], [2, 1, 3]].\nlabel_compl(25,L) :- L=[[1, 2, 3], [3, 1, 2]].\nlabel_compl(26,L) :- L=[[1, 2, 3], [2, 3, 1]].\nlabel_compl(27,L) :- L=[[1, 3, 2], [2, 1, 3]].\nlabel_compl(28,L) :- L=[[1, 3, 2], [3, 2, 1]].\nlabel_compl(29,L) :- L=[[2, 1, 3], [1, 3, 2]].\nlabel_compl(30,L) :- L=[[2, 1, 3], [3, 2, 1]].\nlabel_compl(31,L) :- L=[[3, 1, 2], [1, 2, 3]].\nlabel_compl(32,L) :- L=[[3, 1, 2], [2, 3, 1]].\nlabel_compl(33,L) :- L=[[2, 3, 1], [1, 2, 3]].\nlabel_compl(34,L) :- L=[[2, 3, 1], [3, 1, 2]].\nlabel_compl(35,L) :- L=[[3, 2, 1], [1, 3, 2]].\nlabel_compl(36,L) :- L=[[3, 2, 1], [2, 1, 3]].\nlabel_compl(37,L) :- L=[[1, 2, 3], [3, 1, 2]].\nlabel_compl(38,L) :- L=[[1, 2, 3], [2, 3, 1]].\nlabel_compl(39,L) :- L=[[1, 3, 2], [2, 1, 3]].\nlabel_compl(40,L) :- L=[[1, 3, 2], [3, 2, 1]].\nlabel_compl(41,L) :- L=[[2, 1, 3], [1, 3, 2]].\nlabel_compl(42,L) :- L=[[2, 1, 3], [3, 2, 1]].\nlabel_compl(43,L) :- L=[[3, 1, 2], [1, 2, 3]].\nlabel_compl(44,L) :- L=[[3, 1, 2], [2, 3, 1]].\nlabel_compl(45,L) :- L=[[2, 3, 1], [1, 2, 3]].\nlabel_compl(46,L) :- L=[[2, 3, 1], [3, 1, 2]].\nlabel_compl(47,L) :- L=[[3, 2, 1], [1, 3, 2]].\nlabel_compl(48,L) :- L=[[3, 2, 1], [2, 1, 3]].\nlabel_compl(49,L) :- L=[[1, 2, 3], [3, 1, 2]].\nlabel_compl(50,L) :- L=[[1, 2, 3], [2, 3, 1]].\nlabel_compl(51,L) :- L=[[1, 3, 2], [2, 1, 3]].\nlabel_compl(52,L) :- L=[[1, 3, 2], [3, 2, 1]].\nlabel_compl(53,L) :- L=[[2, 1, 3], [1, 3, 2]].\nlabel_compl(54,L) :- L=[[2, 1, 3], [3, 2, 1]].\nlabel_compl(55,L) :- L=[[3, 1, 2], [1, 2, 3]].\nlabel_compl(56,L) :- L=[[3, 1, 2], [2, 3, 1]].\nlabel_compl(57,L) :- L=[[2, 3, 1], [1, 2, 3]].\nlabel_compl(58,L) :- L=[[2, 3, 1], [3, 1, 2]].\nlabel_compl(59,L) :- L=[[3, 2, 1], [1, 3, 2]].\nlabel_compl(60,L) :- L=[[3, 2, 1], [2, 1, 3]].\nlabel_compl(61,L) :- L=[[1, 2, 3], [3, 1, 2]].\nlabel_compl(62,L) :- L=[[1, 2, 3], [2, 3, 1]].\nlabel_compl(63,L) :- L=[[1, 3, 2], [2, 1, 3]].\nlabel_compl(64,L) :- L=[[1, 3, 2], [3, 2, 1]].\nlabel_compl(65,L) :- L=[[2, 1, 3], [1, 3, 2]].\nlabel_compl(66,L) :- L=[[2, 1, 3], [3, 2, 1]].\nlabel_compl(67,L) :- L=[[3, 1, 2], [1, 2, 3]].\nlabel_compl(68,L) :- L=[[3, 1, 2], [2, 3, 1]].\nlabel_compl(69,L) :- L=[[2, 3, 1], [1, 2, 3]].\nlabel_compl(70,L) :- L=[[2, 3, 1], [3, 1, 2]].\nlabel_compl(71,L) :- L=[[3, 2, 1], [1, 3, 2]].\nlabel_compl(72,L) :- L=[[3, 2, 1], [2, 1, 3]].\nlabel_compl(73,L) :- L=[[1, 2, 3], [3, 1, 2]].\nlabel_compl(74,L) :- L=[[1, 2, 3], [2, 3, 1]].\nlabel_compl(75,L) :- L=[[1, 3, 2], [2, 1, 3]].\nlabel_compl(76,L) :- L=[[1, 3, 2], [3, 2, 1]].\nlabel_compl(77,L) :- L=[[2, 1, 3], [1, 3, 2]].\nlabel_compl(78,L) :- L=[[2, 1, 3], [3, 2, 1]].\nlabel_compl(79,L) :- L=[[3, 1, 2], [1, 2, 3]].\nlabel_compl(80,L) :- L=[[3, 1, 2], [2, 3, 1]].\nlabel_compl(81,L) :- L=[[2, 3, 1], [1, 2, 3]].\nlabel_compl(82,L) :- L=[[2, 3, 1], [3, 1, 2]].\nlabel_compl(83,L) :- L=[[3, 2, 1], [1, 3, 2]].\nlabel_compl(84,L) :- L=[[3, 2, 1], [2, 1, 3]].\nlabel_compl(85,L) :- L=[[1, 2, 3], [3, 1, 2]].\nlabel_compl(86,L) :- L=[[1, 2, 3], [2, 3, 1]].\nlabel_compl(87,L) :- L=[[1, 3, 2], [2, 1, 3]].\nlabel_compl(88,L) :- L=[[1, 3, 2], [3, 2, 1]].\nlabel_compl(89,L) :- L=[[2, 1, 3], [1, 3, 2]].\nlabel_compl(90,L) :- L=[[2, 1, 3], [3, 2, 1]].\nlabel_compl(91,L) :- L=[[3, 1, 2], [1, 2, 3]].\nlabel_compl(92,L) :- L=[[3, 1, 2], [2, 3, 1]].\nlabel_compl(93,L) :- L=[[2, 3, 1], [1, 2, 3]].\nlabel_compl(94,L) :- L=[[2, 3, 1], [3, 1, 2]].\nlabel_compl(95,L) :- L=[[3, 2, 1], [1, 3, 2]].\nlabel_compl(96,L) :- L=[[3, 2, 1], [2, 1, 3]].\nlabel_compl(97,L) :- L=[[1, 2, 3], [3, 1, 2]].\nlabel_compl(98,L) :- L=[[1, 2, 3], [2, 3, 1]].\nlabel_compl(99,L) :- L=[[1, 3, 2], [2, 1, 3]].\nlabel_compl(100,L) :- L=[[1, 3, 2], [3, 2, 1]].\nlabel_compl(101,L) :- L=[[2, 1, 3], [1, 3, 2]].\nlabel_compl(102,L) :- L=[[2, 1, 3], [3, 2, 1]].\nlabel_compl(103,L) :- L=[[3, 1, 2], [1, 2, 3]].\nlabel_compl(104,L) :- L=[[3, 1, 2], [2, 3, 1]].\nlabel_compl(105,L) :- L=[[2, 3, 1], [1, 2, 3]].\nlabel_compl(106,L) :- L=[[2, 3, 1], [3, 1, 2]].\nlabel_compl(107,L) :- L=[[3, 2, 1], [1, 3, 2]].\nlabel_compl(108,L) :- L=[[3, 2, 1], [2, 1, 3]].\n"}
#Accuracy 0.0
i,time,loss,ground_time,compile_time,eval_time
2,21.237619876861572,4.080618381500244,20.944154024124146,0.029335737228393555,0.1177670955657959
3,42.76764488220215,3.4830877780914307,21.324291944503784,0.028285980224609375,0.10263395309448242
4,64.21534395217896,1.3212841749191284,21.252745866775513,0.02821207046508789,0.10287308692932129
5,83.63661074638367,0.007014920469373465,19.255122900009155,0.01795196533203125,0.06467199325561523
6,96.68148183822632,0.0,12.961274147033691,0.017660140991210938,0.037895917892456055
7,109.87440276145935,0.0,13.100164890289307,0.01758289337158203,0.03903603553771973
8,122.90649604797363,0.0,12.950375080108643,0.017955780029296875,0.037277936935424805
9,136.0249218940735,0.0,13.037091970443726,0.017472028732299805,0.039118051528930664
10,149.31779885292053,0.0,13.212039947509766,0.017452001571655273,0.0395658016204834
11,162.53956389427185,0.0,13.138622999191284,0.018060684204101562,0.038800954818725586
12,175.70730805397034,0.0,13.079705953598022,0.018053054809570312,0.037760019302368164
13,189.00089383125305,0.0,13.209806680679321,0.0178072452545166,0.039324045181274414
14,202.33655977249146,0.0,13.248909950256348,0.017222881317138672,0.03802084922790527
15,215.55025577545166,0.0,13.132704973220825,0.017972946166992188,0.03760528564453125
16,228.77380394935608,0.0,13.140403032302856,0.0176541805267334,0.03842592239379883
17,228.8337688446045,0.0,20.944154024124146,0.029335737228393555,0.03130006790161133
18,228.89777994155884,0.0,21.324291944503784,0.028285980224609375,0.03213691711425781
19,228.95811796188354,0.0,21.252745866775513,0.02821207046508789,0.031829118728637695
20,229.02223587036133,0.0,19.255122900009155,0.01795196533203125,0.03181195259094238
21,229.08547472953796,0.0,12.961274147033691,0.017660140991210938,0.03190112113952637
22,229.14610385894775,0.0,13.100164890289307,0.01758289337158203,0.03131890296936035
23,229.2081069946289,0.0,12.950375080108643,0.017955780029296875,0.032006025314331055
24,229.27082586288452,0.0,13.037091970443726,0.017472028732299805,0.03152203559875488
25,229.3347909450531,0.0,13.212039947509766,0.017452001571655273,0.03209090232849121
26,229.3983588218689,0.0,13.138622999191284,0.018060684204101562,0.03145909309387207
27,229.46471786499023,0.0,13.079705953598022,0.018053054809570312,0.03227710723876953
28,229.52819991111755,0.0,13.209806680679321,0.0178072452545166,0.03147482872009277
29,229.5899510383606,0.0,13.248909950256348,0.017222881317138672,0.03168010711669922
30,229.65412998199463,0.0,13.132704973220825,0.017972946166992188,0.031950950622558594
31,229.71284365653992,0.0,13.140403032302856,0.0176541805267334,0.031659841537475586
32,229.7735469341278,0.0,20.944154024124146,0.029335737228393555,0.03242802619934082
33,229.83739805221558,0.0,21.324291944503784,0.028285980224609375,0.03184199333190918
34,229.90670585632324,0.0,21.252745866775513,0.02821207046508789,0.03257584571838379
35,229.96812391281128,0.0,19.255122900009155,0.01795196533203125,0.03205990791320801
36,230.03344798088074,0.0,12.961274147033691,0.017660140991210938,0.03172898292541504
37,230.10108494758606,0.0,13.100164890289307,0.01758289337158203,0.031180858612060547
38,230.16730976104736,0.0,12.950375080108643,0.017955780029296875,0.032134056091308594
39,230.2453739643097,0.0,13.037091970443726,0.017472028732299805,0.03304600715637207
40,230.30672001838684,0.0,13.212039947509766,0.017452001571655273,0.031580209732055664
41,230.36868476867676,0.0,13.138622999191284,0.018060684204101562,0.03158402442932129
42,230.4282009601593,0.0,13.079705953598022,0.018053054809570312,0.03151106834411621
43,230.4896388053894,0.0,13.209806680679321,0.0178072452545166,0.03223299980163574
44,230.5520157814026,0.0,13.248909950256348,0.017222881317138672,0.03116607666015625
45,230.61331987380981,0.0,13.132704973220825,0.017972946166992188,0.03192305564880371
46,230.67390084266663,0.0,13.140403032302856,0.0176541805267334,0.03177809715270996
47,230.7352259159088,0.0,20.944154024124146,0.029335737228393555,0.031625986099243164
48,230.79891991615295,0.0,21.324291944503784,0.028285980224609375,0.031881093978881836
49,230.8646159172058,0.0,21.252745866775513,0.02821207046508789,0.031529903411865234
50,230.9279329776764,0.0,19.255122900009155,0.01795196533203125,0.031235694885253906
51,230.9905710220337,0.0,12.961274147033691,0.017660140991210938,0.03149008750915527
52,231.05420589447021,0.0,13.100164890289307,0.01758289337158203,0.031507015228271484
53,231.11658787727356,0.0,12.950375080108643,0.017955780029296875,0.03189897537231445
54,231.1769688129425,0.0,13.037091970443726,0.017472028732299805,0.031829118728637695
55,231.2427248954773,0.0,13.212039947509766,0.017452001571655273,0.031713008880615234
56,231.30300283432007,0.0,13.138622999191284,0.018060684204101562,0.03162217140197754
57,231.36358094215393,0.0,13.079705953598022,0.018053054809570312,0.03154397010803223
58,231.42499470710754,0.0,13.209806680679321,0.0178072452545166,0.03126883506774902
59,231.48443293571472,0.0,13.248909950256348,0.017222881317138672,0.03175210952758789
60,231.54707789421082,0.0,13.132704973220825,0.017972946166992188,0.03145790100097656
61,231.60797476768494,0.0,13.140403032302856,0.0176541805267334,0.031244754791259766
62,231.67765283584595,0.0,20.944154024124146,0.029335737228393555,0.031450748443603516
63,231.7366600036621,0.0,21.324291944503784,0.028285980224609375,0.031343936920166016
64,231.79881596565247,0.0,21.252745866775513,0.02821207046508789,0.030775785446166992
65,231.86122393608093,0.0,19.255122900009155,0.01795196533203125,0.03133082389831543
66,231.93317675590515,0.0,12.961274147033691,0.017660140991210938,0.032077789306640625
67,231.99446296691895,0.0,13.100164890289307,0.01758289337158203,0.031820058822631836
68,232.05721783638,0.0,12.950375080108643,0.017955780029296875,0.03146505355834961
69,232.11862874031067,0.0,13.037091970443726,0.017472028732299805,0.03191423416137695
70,232.18124294281006,0.0,13.212039947509766,0.017452001571655273,0.031783342361450195
71,232.23855996131897,0.0,13.138622999191284,0.018060684204101562,0.03141903877258301
72,232.30224800109863,0.0,13.079705953598022,0.018053054809570312,0.031458139419555664
73,232.36426281929016,0.0,13.209806680679321,0.0178072452545166,0.031877756118774414
74,232.42442297935486,0.0,13.248909950256348,0.017222881317138672,0.031459808349609375
75,232.49433708190918,0.0,13.132704973220825,0.017972946166992188,0.03122091293334961
76,232.55640983581543,0.0,13.140403032302856,0.0176541805267334,0.03167414665222168